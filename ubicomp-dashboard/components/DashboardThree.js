import React, { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Eye, AlertTriangle, Users, MapPin, Clock, Search, Award } from 'lucide-react';

const ProfileTag = ({ profileType, isHighConcern }) => {
  let bgColor = 'bg-gray-200';
  let textColor = 'text-gray-700';
  // Improved text formatting for profileType
  let text = profileType.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());

  if (profileType === 'Real Phone Synthetic') { // Match the formatted text
    bgColor = 'bg-green-100'; // Lighter green
    textColor = 'text-green-700';
    text = `üì± ${text}`;
  } else if (isHighConcern) {
    bgColor = 'bg-yellow-100'; // Lighter yellow
    textColor = 'text-yellow-700';
    text = `‚ö†Ô∏è ${text}`;
  } else if (profileType === 'Absence') { // Match the formatted text
    bgColor = 'bg-red-100'; // Lighter red
    textColor = 'text-red-700';
    // No emoji here, it's in the provocative note
  } else if (profileType === 'Generic') { // Match the formatted text
    bgColor = 'bg-blue-100'; // Lighter blue
    textColor = 'text-blue-700';
  }

  return (
    <span className={`px-3 py-1 text-xs sm:text-sm font-medium rounded-full ${bgColor} ${textColor} whitespace-nowrap shadow-sm`}>
      {text}
    </span>
  );
};
const syntheticMovementPatterns = [
  "Œ†ŒµœÅŒΩŒ¨ŒµŒπ Œ±œÄœå œÑŒøŒΩ œÉŒ±œÅœâœÑŒÆ Œë (ŒùŒ≠Œø ŒöœÑŒØœÅŒπŒø CEID) Œ∫Œ±Œ∏Œ∑ŒºŒµœÅŒπŒΩŒ¨ œÉœÑŒπœÇ 8:30 œÄ.Œº.",
  "Œ£œÖœáŒΩŒ≠œÇ ŒºŒµœÑŒ±Œ∫ŒπŒΩŒÆœÉŒµŒπœÇ ŒºŒµœÑŒ±Œæœç ŒöœÖŒªŒπŒ∫ŒµŒØŒøœÖ Œ∫Œ±Œπ ŒïœÅŒ≥Œ±œÉœÑŒ∑œÅŒØœâŒΩ Œó/Œ•",
  "ŒëœÉœÖŒΩŒµœÄŒÆœÇ œÄŒ±œÅŒøœÖœÉŒØŒ± œÉœÑŒø campus",
  "Œ£œÑŒ±Œ∏ŒµœÅŒÆ œÄŒ±œÅŒøœÖœÉŒØŒ± Œ∫ŒøŒΩœÑŒ¨ œÉœÑŒøŒΩ server room œÑŒøœÖ CEID",
  "ŒöŒπŒΩŒµŒØœÑŒ±Œπ Œ≥œÅŒÆŒ≥ŒøœÅŒ± ŒºŒµœÑŒ±Œæœç Œ∫œÑŒπœÅŒØœâŒΩ",
  "ŒïŒΩœÑŒøœÄŒØœÉœÑŒ∑Œ∫Œµ Œ∫ŒøŒΩœÑŒ¨ œÉœÑŒ∑ŒΩ ŒµŒØœÉŒøŒ¥Œø œÑŒøœÖ ŒùŒ≠ŒøœÖ ŒöœÑŒπœÅŒØŒøœÖ CEID",
  "Œó Œ¥œÅŒ±œÉœÑŒ∑œÅŒπœåœÑŒ∑œÑŒ± ŒºŒµŒπœéŒΩŒµœÑŒ±Œπ œÑŒπœÇ Œ∑ŒªŒπœåŒªŒøœÖœÉœÑŒµœÇ ŒºŒ≠œÅŒµœÇ",
  "Œ£œÖœáŒΩŒ≠œÇ Œ¥ŒπŒµŒªŒµœçœÉŒµŒπœÇ Œ±œÄœå œÑŒø ŒùŒ≠Œø ŒöœÑŒØœÅŒπŒø œÑŒøœÖ CEID"
];

const syntheticTimeDetails = [
  "Œ§ŒµŒªŒµœÖœÑŒ±ŒØŒ± ŒòŒ≠Œ±œÉŒ∑: Œ§ŒµœÑŒ¨œÅœÑŒ∑ 14:30 Œ∫ŒøŒΩœÑŒ¨ œÉœÑŒø ŒöœÖŒªŒπŒ∫ŒµŒØŒø CEID",
  "Œ§ŒµŒªŒµœÖœÑŒ±ŒØŒ± ŒòŒ≠Œ±œÉŒ∑: Œ§œÅŒØœÑŒ∑ 19:45 Œ∫ŒøŒΩœÑŒ¨ œÉœÑŒø ŒôŒ§Œ•Œï 'ŒîŒπœåœÜŒ±ŒΩœÑŒøœÇ'",
  "Œ§ŒµŒªŒµœÖœÑŒ±ŒØŒ± ŒòŒ≠Œ±œÉŒ∑: Œ£œÑŒø œÖœÄœåŒ≥ŒµŒπŒø, Œ∫ŒøŒΩœÑŒ¨ œÉœÑŒø E-Sports Club",
  "Œ§ŒµŒªŒµœÖœÑŒ±ŒØŒ± ŒòŒ≠Œ±œÉŒ∑: Œ†œÅŒπŒΩ 2 œéœÅŒµœÇ Œ∫ŒøŒΩœÑŒ¨ œÉœÑŒ∑ŒΩ Œ†œÅœÖœÑŒ±ŒΩŒµŒØŒ±",
  "Œ§ŒµŒªŒµœÖœÑŒ±ŒØŒ± ŒòŒ≠Œ±œÉŒ∑: ŒßŒ∏ŒµœÇ, Œ±œÄŒøŒªŒ±ŒºŒ≤Œ¨ŒΩŒøŒΩœÑŒ±œÇ œÑŒøŒΩ ŒÆŒªŒπŒø œÉœÑŒø Œ≥Œ∫Œ±Œ∂œåŒΩ œÑŒøœÖ campus",
  "Œ†ŒπŒ∏Œ±ŒΩœåŒΩ ŒµœÄŒπœÉŒ∫Œ≠œÄœÑŒ∑œÇ ŒÆ ŒΩŒ≠ŒøœÇ œÜŒøŒπœÑŒ∑œÑŒÆœÇ",
  "Œ•œàŒ∑ŒªŒÆ ŒºŒµœÑŒ±œÜŒøœÅŒ¨ Œ¥ŒµŒ¥ŒøŒºŒ≠ŒΩœâŒΩ œÄœÅŒøœÇ ŒµŒæœâœÑŒµœÅŒπŒ∫ŒøœçœÇ IP",
  "Œ§ŒµŒªŒµœÖœÑŒ±ŒØŒ± Œ¥œÅŒ±œÉœÑŒ∑œÅŒπœåœÑŒ∑œÑŒ±: Œ†œÅŒπŒΩ 2 œéœÅŒµœÇ"
];

const syntheticLocationDetails = [
  "Œ†œÅœâŒØ: ŒëŒØŒ∏ŒøœÖœÉŒ± Œï0.1",
  "ŒëœÄœåŒ≥ŒµœÖŒºŒ±: ŒëŒØŒ∏ŒøœÖœÉŒ± Œ£ŒµŒºŒπŒΩŒ±œÅŒØœâŒΩ",
  "ŒíœÅŒ¨Œ¥œÖ: ŒöœÖŒªŒπŒ∫ŒµŒØŒø Œ†Œ±ŒΩŒµœÄŒπœÉœÑŒ∑ŒºŒπŒøœçœÄŒøŒªŒ∑œÇ",
  "ŒíœÅŒ¨Œ¥œÖ: ŒïŒΩŒµœÅŒ≥œåœÇ œÉœÑŒø Œ¥ŒØŒ∫œÑœÖŒø œÑŒøœÖ Œ†Œ±ŒΩŒµœÄŒπœÉœÑŒ∑ŒºŒØŒøœÖ, œÄŒπŒ∏Œ±ŒΩœåŒΩ Œ≥ŒπŒ± gaming",
  "ŒöŒπŒΩŒµŒØœÑŒ±Œπ œÄœÅŒøœÇ œÑŒπœÇ Œ±ŒØŒ∏ŒøœÖœÉŒµœÇ Œ¥ŒπŒ¥Œ±œÉŒ∫Œ±ŒªŒØŒ±œÇ",
  "ŒõŒµŒπœÑŒøœÖœÅŒ≥ŒµŒØ Œ∫œÖœÅŒØœâœÇ ŒµŒ∫œÑœåœÇ œâœÅŒ±œÅŒØŒøœÖ Œ≥œÅŒ±œÜŒµŒØŒøœÖ",
  "Œ§ŒøœÄŒøŒ∏ŒµœÉŒØŒ±: ŒÜŒ≥ŒΩœâœÉœÑŒ∑ œåœÑŒ±ŒΩ Œ≠œáŒµŒπ Œ∫Œ±Œªœå Œ∫Œ±ŒπœÅœå",
  "Œ†œÅœâŒØ: Œ£œÖŒΩŒÆŒ∏œâœÇ ŒÆœÉœÖœáŒ∑ œÄŒ±œÅŒøœÖœÉŒØŒ±"
];

const syntheticSocialInsights = [
  "ŒüŒºŒ¨Œ¥ŒµœÇ: ŒüŒºŒ¨Œ¥Œ± Œ°ŒøŒºœÄŒøœÑŒπŒ∫ŒÆœÇ CEID, ŒöœçŒ∫ŒªŒøœÇ ŒúŒµŒªŒ≠œÑŒ∑œÇ ŒëŒªŒ≥ŒøœÅŒØŒ∏ŒºœâŒΩ",
  "ŒüŒºŒ¨Œ¥ŒµœÇ: ŒòŒµŒ±œÑœÅŒπŒ∫ŒÆ ŒüŒºŒ¨Œ¥Œ± Œ†Œ±ŒΩŒµœÄŒπœÉœÑŒ∑ŒºŒØŒøœÖ Œ†Œ±œÑœÅœéŒΩ, Œ¶œâœÑŒøŒ≥œÅŒ±œÜŒπŒ∫œåœÇ ŒåŒºŒπŒªŒøœÇ",
  "ŒüŒºŒ¨Œ¥ŒµœÇ: E-Sports Club Patras, Anime Fan Group",
  "ŒöŒøŒπŒΩœâŒΩŒπŒ∫œåœÇ ŒöœçŒ∫ŒªŒøœÇ: ŒÜŒ≥ŒΩœâœÉœÑŒøœÇ, œÄŒµœÅŒΩŒ¨ŒµŒπ Œ±œÄŒ±œÅŒ±œÑŒÆœÅŒ∑œÑŒøœÇ/Œ∑",
  "ŒöŒøŒπŒΩœâŒΩŒπŒ∫Œ≠œÇ Œ†œÅŒøœÑŒπŒºŒÆœÉŒµŒπœÇ: ŒïŒ∫œÑŒπŒºŒ¨ œÑŒøŒΩ ŒµŒæœâœÑŒµœÅŒπŒ∫œå œáœéœÅŒø",
  "Œ£œÖŒΩŒ¥Œ≠œÉŒµŒπœÇ: ŒöœÅœÖœÄœÑŒøŒ≥œÅŒ±œÜŒ∑ŒºŒ≠ŒΩŒµœÇ, ŒºŒ∑ Œ±ŒΩŒ±Œ≥ŒΩœâœÅŒØœÉŒπŒºŒµœÇ",
  "ŒëŒªŒªŒ∑ŒªŒµœÄŒπŒ¥œÅŒ¨œÉŒµŒπœÇ: ŒïŒªŒ¨œáŒπœÉœÑŒµœÇ œÄœÅŒøœÇ œÑŒø œÄŒ±œÅœåŒΩ",
  "ŒëŒªŒªŒ∑ŒªŒµœÄŒπŒ¥œÅŒ¨œÉŒµŒπœÇ: ŒöŒ¨œÑœâ Œ±œÄœå œÑŒø Œ∫Œ±ŒΩŒøŒΩŒπŒ∫œå"
];

const syntheticBehavioralNotes = [
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: Œ¶Œ±ŒØŒΩŒµœÑŒ±Œπ ŒΩŒ± Œ¥ŒØŒΩŒµŒπ œÄœÅŒøœÑŒµœÅŒ±ŒπœåœÑŒ∑œÑŒ± œÉœÑŒπœÇ Œ±Œ∫Œ±Œ¥Œ∑ŒºŒ±œäŒ∫Œ≠œÇ œÖœÄŒøœáœÅŒµœéœÉŒµŒπœÇ. Œâ ŒºŒÆœÄœâœÇ œåœáŒπ;",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: Œ†ŒπŒ∏Œ±ŒΩŒ≠œÇ Œ¥œÖœÉŒ∫ŒøŒªŒØŒµœÇ ŒπœÉŒøœÅœÅŒøœÄŒØŒ±œÇ ŒºŒµœÑŒ±Œæœç œÜŒøŒπœÑŒ∑œÑŒπŒ∫ŒÆœÇ Œ∂œâŒÆœÇ Œ∫Œ±Œπ Œ¥ŒπŒ±Œ≤Œ¨œÉŒºŒ±œÑŒøœÇ",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: Œ•œàŒ∑ŒªŒÆ Œ∫Œ±œÑŒ±ŒΩŒ¨ŒªœâœÉŒ∑ bandwidth œÑŒπœÇ ŒΩœÖœáœÑŒµœÅŒπŒΩŒ≠œÇ œéœÅŒµœÇ",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: Œ¶Œ±ŒØŒΩŒµœÑŒ±Œπ œÑœÖœÄŒπŒ∫œåœÇ œÜŒøŒπœÑŒ∑œÑŒÆœÇ/œÑœÅŒπŒ±. Œâ ŒºŒÆœÄœâœÇ œåœáŒπ;",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: ŒåœÑŒ±ŒΩ Œ≠œáŒµŒπ Œ∫Œ±Œªœå Œ∫Œ±ŒπœÅœå, ŒµŒæŒ±œÜŒ±ŒΩŒØŒ∂ŒµœÑŒ±Œπ. Œ†œÅŒøœÑŒµœÅŒ±ŒπœåœÑŒ∑œÑŒ± œÉœÑŒ∑ŒΩ Œ≠ŒæŒøŒ¥Œø, Œµ;",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: ŒîœÅŒ±œÉœÑŒ∑œÅŒπœåœÑŒ∑œÑŒ± œáœÅŒÆŒ∂ŒµŒπ Œ¥ŒπŒµœÅŒµœçŒΩŒ∑œÉŒ∑œÇ",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: ŒïŒæŒµœÅŒµœÖŒΩŒ¨ œÑŒøŒΩ œáœéœÅŒø",
  "Œ£œÖŒºœÄŒµœÅŒπœÜŒøœÅŒπŒ∫ŒÆ Œ£Œ∑ŒºŒµŒØœâœÉŒ∑: ŒùŒ≠Œ± œÉœÖœÉŒ∫ŒµœÖŒÆ, Œ±œÄŒ±ŒπœÑŒµŒØœÑŒ±Œπ œÄœÅŒøœÉŒøœáŒÆ"
];

// More varied absence scenarios
const absentDeviceScenarios = [
  {
    name: "Galaxy_Nikos",
    type: "PhD Student",
    message: "Œ§Œø Galaxy œÑŒøœÖ ŒùŒØŒ∫ŒøœÖ Œ¥ŒµŒΩ Œ≠œáŒµŒπ ŒµŒºœÜŒ±ŒΩŒπœÉœÑŒµŒØ œÉœÑŒø Œ¥ŒØŒ∫œÑœÖŒø ŒµŒ¥œé Œ∫Œ±Œπ 3 ŒºŒ≠œÅŒµœÇ. ŒàœáŒµŒπ œÑŒµŒªŒµŒπœéœÉŒµŒπ œÑŒ∑ Œ¥ŒπŒ±œÑœÅŒπŒ≤ŒÆ œÑŒøœÖ;"
  },
  {
    name: "iPhone_Maria",
    type: "Professor",
    message: "Œó ŒöŒ±Œ∏Œ∑Œ≥ŒÆœÑœÅŒπŒ± ŒúŒ±œÅŒØŒ± Œ¥ŒµŒΩ Œ≠œáŒµŒπ œÉœÖŒΩŒ¥ŒµŒ∏ŒµŒØ Œ±œÄœå œÑŒø Œ≥œÅŒ±œÜŒµŒØŒø œÑŒ∑œÇ ŒµŒ¥œé Œ∫Œ±Œπ ŒºŒπŒ± ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥Œ±. ŒïŒØŒΩŒ±Œπ œÉŒµ œÉœÖŒΩŒ≠Œ¥œÅŒπŒø;"
  },
  {
    name: "Pixel_Andreas",
    type: "Lab Assistant", 
    message: "Œü Andreas Œ¥ŒµŒΩ Œ≠œáŒµŒπ ŒµŒºœÜŒ±ŒΩŒπœÉœÑŒµŒØ œÉœÑŒø ŒµœÅŒ≥Œ±œÉœÑŒÆœÅŒπŒø Œ±œÄœå œÑŒ∑ŒΩ Œ†Œ±œÅŒ±œÉŒ∫ŒµœÖŒÆ. ŒüŒπ œÜŒøŒπœÑŒ∑œÑŒ≠œÇ œÅœâœÑŒ¨ŒΩŒµ Œ≥ŒπŒ± œÑŒ± ŒºŒ±Œ∏ŒÆŒºŒ±œÑŒ¨ œÑŒøœÖœÇ."
  },
  {
    name: "OnePlus_Katerina",
    type: "MSc Student",
    message: "Œó ŒöŒ±œÑŒµœÅŒØŒΩŒ± Œ±œÄŒøœÖœÉŒπŒ¨Œ∂ŒµŒπ Œ±œÄœå œÑŒ± ŒºŒ±Œ∏ŒÆŒºŒ±œÑŒ± ŒµŒ¥œé Œ∫Œ±Œπ 5 ŒºŒ≠œÅŒµœÇ. Œ§Œø œÑŒ∑ŒªŒ≠œÜœâŒΩœå œÑŒ∑œÇ Œ¥ŒµŒΩ ŒµŒΩœÑŒøœÄŒØŒ∂ŒµœÑŒ±Œπ œÄŒøœÖŒ∏ŒµŒΩŒ¨ œÉœÑŒø campus."
  }
];

const getRandomElement = (arr) => arr[Math.floor(Math.random() * arr.length)];

const DetailItem = ({ icon: IconComponent, text, iconColor = "text-slate-500" }) => {
  if (!text) return null;
  return (
    <div className="flex items-start space-x-2 mb-2">
      <IconComponent className={`h-4 w-4 ${iconColor} mt-0.5 flex-shrink-0`} />
      <span className="text-slate-700 text-sm leading-relaxed">{text}</span>
    </div>
  );
};

export default function DashboardThree() {
  const [surveillanceProfiles, setSurveillanceProfiles] = useState([]);
  const [coLocationData, setCoLocationData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const MAX_PROFILES_TO_DISPLAY = 6;

  useEffect(() => {
    const fetchAndProcessData = async () => {
      setIsLoading(true);
      try {
        const visibleDevicesRes = await fetch('/api/visible-devices');
        if (!visibleDevicesRes.ok) throw new Error(`Failed to fetch visible devices: ${visibleDevicesRes.statusText}`);
        const visibleDevicesData = await visibleDevicesRes.json();
        const allVisibleDevices = Array.isArray(visibleDevicesData.devices) ? visibleDevicesData.devices : [];

        // STRICT PHONE FILTERING - Only devices with major_class = 'Phone'
        const confirmedPhones = allVisibleDevices.filter(
          d => d.major_class && d.major_class.toLowerCase() === 'phone'
        );
        const confirmedPhoneDisplayNames = new Set(confirmedPhones.map(p => p.name));

        // Generate synthetic absence profiles (randomly select 1-2)
        const numAbsenceProfiles = Math.floor(Math.random() * 2) + 1; // 1 or 2
        const selectedAbsenceScenarios = [];
        const shuffledScenarios = [...absentDeviceScenarios].sort(() => 0.5 - Math.random());
        
        for (let i = 0; i < Math.min(numAbsenceProfiles, shuffledScenarios.length); i++) {
          const scenario = shuffledScenarios[i];
          // Only add if this device is NOT currently visible
          if (!confirmedPhoneDisplayNames.has(scenario.name)) {
            selectedAbsenceScenarios.push({
              id: `absence-${scenario.name}-${Date.now()}`,
              profile_name: `${scenario.name}_Absence`,
              device_name_trigger: scenario.name,
              display_device_name: `${scenario.name} (${scenario.type})`,
              profile_type: 'absence',
              is_high_concern: true,
              provocative_note: scenario.message
            });
          }
        }

        // Generate synthetic profiles for real phones
        const generatedSyntheticProfilesForRealPhones = [];
        for (const phone of confirmedPhones) {
          generatedSyntheticProfilesForRealPhones.push({
            id: `real-sync-${phone.name}-${Date.now()}`,
            profile_name: `${phone.name}_RealSynthetic`,
            device_name_trigger: phone.name,
            display_device_name: phone.name,
            movement_pattern_1: getRandomElement(syntheticMovementPatterns),
            movement_pattern_2: getRandomElement(syntheticTimeDetails),
            movement_pattern_3: getRandomElement(syntheticLocationDetails),
            movement_pattern_4: Math.random() < 0.7 ? getRandomElement(syntheticLocationDetails) : null,
            social_insight_1: getRandomElement(syntheticSocialInsights),
            social_insight_2: Math.random() < 0.8 ? getRandomElement(syntheticBehavioralNotes) : null,
            is_high_concern: Math.random() < 0.25,
            profile_type: 'real_phone_synthetic',
            provocative_note: Math.random() < 0.6 ? `üì± Œ§Œø ${phone.name} œÄŒ±œÅŒ±Œ∫ŒøŒªŒøœÖŒ∏ŒµŒØœÑŒ±Œπ ŒºŒµ ŒµŒπŒ¥ŒπŒ∫œå œÄœÅœâœÑœåŒ∫ŒøŒªŒªŒø. Œ£Œ∑ŒºŒ±ŒΩœÑŒπŒ∫Œ≠œÇ œÄŒªŒ∑œÅŒøœÜŒøœÅŒØŒµœÇ œÉœÖŒªŒªŒ≠Œ≥ŒøŒΩœÑŒ±Œπ.` : null,
            isNewActualDevice: phone.isNew
          });
        }
        
        // Combine absence and real phone profiles ONLY
        let combinedProfiles = [...selectedAbsenceScenarios, ...generatedSyntheticProfilesForRealPhones];

        // Sort: absence first, then real phones, high concern prioritized
        combinedProfiles.sort((a, b) => {
          if (a.profile_type === 'absence' && b.profile_type !== 'absence') return -1;
          if (b.profile_type === 'absence' && a.profile_type !== 'absence') return 1;
          if (a.is_high_concern && !b.is_high_concern) return -1;
          if (b.is_high_concern && !a.is_high_concern) return 1;
          return (a.display_device_name || a.profile_name).localeCompare(b.display_device_name || b.profile_name);
        });

        // Limit profiles displayed
        const displayableProfiles = combinedProfiles.slice(0, MAX_PROFILES_TO_DISPLAY);
        setSurveillanceProfiles(displayableProfiles);

        // Generate co-location data only from real phones
        const activePhoneNames = generatedSyntheticProfilesForRealPhones.map(p => p.display_device_name);
        const newCoLocationData = [];
        if (activePhoneNames.length >= 2) {
          const usedPairs = new Set();
          for (let i = 0; i < Math.min(2, Math.floor(activePhoneNames.length / 1.5)); i++) {
            let name1Index = Math.floor(Math.random() * activePhoneNames.length);
            let name2Index = Math.floor(Math.random() * activePhoneNames.length);
            while (name2Index === name1Index && activePhoneNames.length > 1) { 
              name2Index = Math.floor(Math.random() * activePhoneNames.length);
            }
            const pairKey = [activePhoneNames[name1Index], activePhoneNames[name2Index]].sort().join('+');
            if (activePhoneNames[name1Index] !== activePhoneNames[name2Index] && !usedPairs.has(pairKey)) {
              newCoLocationData.push({
                pair: `${activePhoneNames[name1Index]} + ${activePhoneNames[name2Index]}`,
                frequency: `${Math.floor(Math.random() * 60) + 40}%`
              });
              usedPairs.add(pairKey);
            }
          }
        }
        setCoLocationData(newCoLocationData);

      } catch (error) {
        console.error("DashboardThree fetch error:", error);
        setSurveillanceProfiles([]);
        setCoLocationData([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchAndProcessData();
    const interval = setInterval(fetchAndProcessData, 15000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-50 min-h-screen font-sans">
      <header className="text-center mb-8 sm:mb-12">
        <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-800">The Watcher</h1>
        <p className="text-base sm:text-lg text-gray-600 mt-1 sm:mt-2">Dynamic Device Surveillance Feed</p>
      </header>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8">
        {/* Main Surveillance Feed - Card Layout */}
        <div className="lg:col-span-2 space-y-4">
          <div className="flex items-center text-xl sm:text-2xl font-semibold text-gray-700 mb-4">
            <Eye className="h-6 w-6 sm:h-7 sm:w-7 mr-2.5 text-blue-600" />
            Surveillance Feed
          </div>
          
          {isLoading && (
            <div className="bg-white rounded-lg shadow-md p-8 text-center">
              <p className="text-gray-500 text-lg">Œ¶œåœÅœÑœâœÉŒ∑ œÄœÅŒøœÜŒØŒª œÄŒ±œÅŒ±Œ∫ŒøŒªŒøœçŒ∏Œ∑œÉŒ∑œÇ...</p>
            </div>
          )}
          
          {!isLoading && surveillanceProfiles.length === 0 && (
            <div className="bg-white rounded-lg shadow-md p-8 text-center">
              <p className="text-gray-600 text-lg">ŒîŒµŒΩ œÖœÄŒ¨œÅœáŒøœÖŒΩ ŒµŒΩŒµœÅŒ≥Œ¨ œÄœÅŒøœÜŒØŒª œÄŒ±œÅŒ±Œ∫ŒøŒªŒøœçŒ∏Œ∑œÉŒ∑œÇ.</p>
            </div>
          )}
          
          {!isLoading && surveillanceProfiles.map((profile) => (
            <div key={profile.id || profile.profile_name} className="bg-white rounded-lg shadow-md p-5 sm:p-6 border-l-4 border-blue-500">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="text-lg sm:text-xl font-semibold text-blue-700">
                    {profile.display_device_name}
                    {profile.isNewActualDevice && (
                      <span className="ml-2 px-2 py-1 bg-red-100 text-red-600 rounded-md text-xs font-bold shadow-sm">
                        ŒùŒ≠Œ±!
                      </span>
                    )}
                  </h3>
                  {profile.profile_type === 'absence' && (
                    <p className="text-sm text-red-600 font-medium mt-1">ABSENCE DETECTED</p>
                  )}
                  {profile.profile_type === 'real_phone_synthetic' && (
                    <p className="text-sm text-green-600 font-medium mt-1">ACTIVE PHONE TRACKING</p>
                  )}
                </div>
                {(profile.is_high_concern || profile.profile_type === 'absence') && (
                  <AlertTriangle className={`h-6 w-6 flex-shrink-0 ${profile.profile_type === 'absence' ? 'text-red-500' : 'text-yellow-500'}`} />
                )}
              </div>

              {profile.profile_type !== 'absence' && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                  <div>
                    <h4 className="text-sm font-semibold text-gray-600 mb-3 uppercase tracking-wide">Movement Patterns</h4>
                    <DetailItem icon={MapPin} text={profile.movement_pattern_1} iconColor="text-blue-500" />
                    <DetailItem icon={Clock} text={profile.movement_pattern_2} iconColor="text-green-500" />
                    <DetailItem icon={MapPin} text={profile.movement_pattern_3} iconColor="text-purple-500" />
                    <DetailItem icon={MapPin} text={profile.movement_pattern_4} iconColor="text-orange-500" />
                  </div>
                  <div>
                    <h4 className="text-sm font-semibold text-gray-600 mb-3 uppercase tracking-wide">Social Insights</h4>
                    <DetailItem icon={Award} text={profile.social_insight_1} iconColor="text-yellow-500" />
                    <DetailItem icon={Search} text={profile.social_insight_2} iconColor="text-indigo-500" />
                  </div>
                </div>
              )}

              {profile.provocative_note && (
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <p className={`text-sm font-medium ${
                    profile.profile_type === 'absence' ? 'text-red-700' :
                    profile.is_high_concern ? 'text-yellow-700' :
                    profile.profile_type === 'real_phone_synthetic' ? 'text-green-700' :
                    'text-gray-600'
                  }`}>
                    {profile.profile_type === 'absence' ? `‚ö†Ô∏è ${profile.provocative_note}` : profile.provocative_note}
                  </p>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Right Column: Info Panels */}
        <div className="space-y-6">
          <Card className="bg-white shadow-md rounded-lg">
            <CardHeader className="pb-3 pt-4 px-5 bg-gray-50 border-b border-gray-200">
              <CardTitle className="text-lg font-semibold text-gray-700 flex items-center">
                <Users className="h-5 w-5 mr-2 text-purple-500" /> Co-location Frequency
              </CardTitle>
            </CardHeader>
            <CardContent className="p-5 space-y-3">
              {isLoading && <p className="text-sm text-gray-500">Loading data...</p>}
              {!isLoading && coLocationData.length === 0 && <p className="text-sm text-gray-500">No co-location data.</p>}
              {coLocationData.map((item, index) => (
                <div key={index}>
                  <p className="text-sm font-medium text-gray-600 mb-1">{item.pair}: <span className="font-bold text-purple-600">{item.frequency}</span></p>
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div className="bg-purple-500 h-full rounded-full" style={{ width: item.frequency }}></div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          <Card className="bg-white shadow-md rounded-lg">
            <CardHeader className="pb-3 pt-4 px-5 bg-gray-50 border-b border-gray-200">
              <CardTitle className="text-lg font-semibold text-gray-700 flex items-center">
                <MapPin className="h-5 w-5 mr-2 text-green-500" /> Tracking Intensity
              </CardTitle>
            </CardHeader>
            <CardContent className="p-5">
              <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                <div className="bg-green-500 h-full rounded-full" style={{ width: '78%' }}></div>
              </div>
              <p className="text-xs text-gray-500">High correlation between device movements detected.</p>
            </CardContent>
          </Card>
        </div>
      </div>

      <footer className="mt-10 py-4 px-6 bg-red-100 border-t-2 border-red-300 rounded-lg shadow-md">
        <p className="text-center text-sm font-medium text-red-700">
          <AlertTriangle className="inline h-5 w-5 mr-1.5" />
          WARNING: This is a simulated surveillance demonstration. No actual persistent tracking or cross-session data linkage occurs.
        </p>
      </footer>
    </div>
  );
}